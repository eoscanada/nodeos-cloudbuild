diff --git a/plugins/history_plugin/history_plugin.cpp b/plugins/history_plugin/history_plugin.cpp
index d8af87408..bef8bef91 100644
--- a/plugins/history_plugin/history_plugin.cpp
+++ b/plugins/history_plugin/history_plugin.cpp
@@ -6,6 +6,7 @@
 #include <eosio/chain_plugin/chain_plugin.hpp>
 
 #include <fc/io/json.hpp>
+#include <fc/time.hpp>
 
 #include <boost/algorithm/string.hpp>
 #include <boost/signals2/connection.hpp>
@@ -141,6 +142,9 @@ namespace eosio {
          std::set<filter_entry> filter_on;
          chain_plugin*          chain_plug = nullptr;
          fc::optional<scoped_connection> applied_transaction_connection;
+         fc::optional<scoped_connection> accepted_block_connection;
+         fc::optional<scoped_connection> irreversible_block_connection;
+         fc::microseconds abi_serializer_max_time = fc::microseconds(5000000);
 
          bool filter( const action_trace& act ) {
             if( bypass_filter )
@@ -243,10 +247,26 @@ namespace eosio {
          }
 
          void on_applied_transaction( const transaction_trace_ptr& trace ) {
+            // TODO: check the modulo and offset, run these two lines only if
+            // we're on the right shard..
+            auto& chain = chain_plug->chain();
+            dlog( "HISTORY_TRACES ${block} ${traces}", ("traces", chain.to_variant_with_abi(trace, abi_serializer_max_time))("block", chain.pending_block_state()->block_num));
+
             for( const auto& atrace : trace->action_traces ) {
                on_action_trace( atrace );
             }
          }
+
+         void on_accepted_block( const block_state_ptr& blk ){
+            auto& chain = chain_plug->chain();
+            dlog( "ACCEPTED_BLOCK ${e}", ("e", chain.to_variant_with_abi(blk, abi_serializer_max_time)));
+         };
+
+         void on_irreversible_block( const block_state_ptr& blk ){
+            auto& chain = chain_plug->chain();
+            dlog( "IRREVERSIBLE_BLOCK ${e}", ("e", chain.to_variant_with_abi(blk, abi_serializer_max_time)));
+         };
+
    };
 
    history_plugin::history_plugin()
@@ -297,6 +317,12 @@ namespace eosio {
                chain.applied_transaction.connect( [&]( const transaction_trace_ptr& p ) {
                   my->on_applied_transaction( p );
                } ));
+         my->accepted_block_connection.emplace(chain.accepted_block.connect( [&]( const block_state_ptr& blk ){
+               my->on_accepted_block(blk);
+         }));
+         my->irreversible_block_connection.emplace(chain.irreversible_block.connect( [&]( const block_state_ptr& blk ){
+               my->on_irreversible_block(blk);
+         }));
       } FC_LOG_AND_RETHROW()
    }
 
