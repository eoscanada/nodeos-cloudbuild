diff --git a/libraries/fc/CMakeLists.txt b/libraries/fc/CMakeLists.txt
index 3e1f2a7..47f86d6 100644
--- a/libraries/fc/CMakeLists.txt
+++ b/libraries/fc/CMakeLists.txt
@@ -64,6 +64,7 @@ set( fc_sources
      src/log/logger.cpp
      src/log/appender.cpp
      src/log/console_appender.cpp
+     src/log/deep_mind_appender.cpp
      src/log/gelf_appender.cpp
      src/log/logger_config.cpp
      src/crypto/_digest_common.cpp
diff --git a/libraries/fc/include/fc/log/deep_mind_appender.hpp b/libraries/fc/include/fc/log/deep_mind_appender.hpp
new file mode 100644
index 0000000..111db65
--- /dev/null
+++ b/libraries/fc/include/fc/log/deep_mind_appender.hpp
@@ -0,0 +1,26 @@
+#pragma once
+#include <fc/log/appender.hpp>
+#include <fc/log/logger.hpp>
+#include <vector>
+
+namespace fc
+{
+   class deep_mind_appender : public appender
+   {
+       public:
+            deep_mind_appender( const variant& args );
+            deep_mind_appender();
+
+            ~deep_mind_appender();
+            void initialize( boost::asio::io_service& io_service ) {
+                 setbuf(stdout, NULL);
+            }
+
+            virtual void log( const log_message& m );
+
+       private:
+            class impl;
+            std::unique_ptr<impl> my;
+   };
+} // namespace fc
+
diff --git a/libraries/fc/include/fc/log/logger.hpp b/libraries/fc/include/fc/log/logger.hpp
index c41e217..3925310 100644
--- a/libraries/fc/include/fc/log/logger.hpp
+++ b/libraries/fc/include/fc/log/logger.hpp
@@ -103,6 +103,11 @@ namespace fc
       (fc::logger::get(DEFAULT_LOGGER)).log( FC_LOG_MESSAGE( debug, FORMAT, __VA_ARGS__ ) ); \
   FC_MULTILINE_MACRO_END
 
+#define dmlog( FORMAT, ... ) \
+  FC_MULTILINE_MACRO_BEGIN \
+   if( (fc::logger::get("deep-mind")).is_enabled( fc::log_level::debug ) ) \
+      (fc::logger::get("deep-mind")).log( FC_LOG_MESSAGE( debug, FORMAT, __VA_ARGS__ ) ); \
+  FC_MULTILINE_MACRO_END
 /**
  * Sends the log message to a special 'user' log stream designed for messages that
  * the end user may like to see.
@@ -175,4 +180,6 @@ namespace fc
 # define ilog(...) FC_MULTILINE_MACRO_BEGIN FC_MULTILINE_MACRO_END
 # undef dlog
 # define dlog(...) FC_MULTILINE_MACRO_BEGIN FC_MULTILINE_MACRO_END
+# undef dmlog
+# define dmlog(...) FC_MULTILINE_MACRO_BEGIN FC_MULTILINE_MACRO_END
 #endif
\ No newline at end of file
diff --git a/libraries/fc/src/log/appender.cpp b/libraries/fc/src/log/appender.cpp
index 643d86a..0e261ed 100644
--- a/libraries/fc/src/log/appender.cpp
+++ b/libraries/fc/src/log/appender.cpp
@@ -2,6 +2,7 @@
 #include <fc/log/logger.hpp>
 #include <unordered_map>
 #include <string>
+#include <fc/log/deep_mind_appender.hpp>
 #include <fc/log/console_appender.hpp>
 #include <fc/log/gelf_appender.hpp>
 #include <fc/variant.hpp>
@@ -42,6 +43,7 @@ namespace fc {
    }
 
    static bool reg_console_appender = appender::register_appender<console_appender>( "console" );
+   static bool reg_deep_mind_appender = appender::register_appender<deep_mind_appender>( "deep-mind" );
    //static bool reg_file_appender = appender::register_appender<file_appender>( "file" );
    static bool reg_gelf_appender = appender::register_appender<gelf_appender>( "gelf" );
 
diff --git a/libraries/fc/src/log/deep_mind_appender.cpp b/libraries/fc/src/log/deep_mind_appender.cpp
new file mode 100644
index 0000000..380a1a1
--- /dev/null
+++ b/libraries/fc/src/log/deep_mind_appender.cpp
@@ -0,0 +1,62 @@
+#include <fc/log/deep_mind_appender.hpp>
+#include <fc/log/log_message.hpp>
+#include <fc/string.hpp>
+#include <fc/variant.hpp>
+#include <fc/reflect/variant.hpp>
+#ifndef WIN32
+#include <unistd.h>
+#endif
+#include <boost/thread/mutex.hpp>
+#include <fc/exception/exception.hpp>
+#include <iomanip>
+#include <mutex>
+#include <sstream>
+
+
+namespace fc {
+
+   class deep_mind_appender::impl {
+   public:
+     boost::mutex                log_mutex;
+   };
+
+   deep_mind_appender::deep_mind_appender( const variant& args )
+   :my(new impl){}
+
+   deep_mind_appender::deep_mind_appender()
+   :my(new impl){}
+
+   deep_mind_appender::~deep_mind_appender() {}
+
+   void deep_mind_appender::log( const log_message& m ) {
+      FILE* out = stdout;
+
+      fc::string message = fc::format_string( "DMLOG " + m.get_format() + "\n", m.get_data() );
+
+      std::unique_lock<boost::mutex> lock(my->log_mutex);
+
+      int retries = 0;
+      auto remaining_size = message.size();
+      auto message_ptr = message.c_str();
+      while (true) {
+         auto written = fwrite(message_ptr, sizeof(char), remaining_size, out);
+         if (written == remaining_size) {
+            break;
+         }
+
+         int errval = ferror(out);
+         fprintf(stderr, "DMLOG FPRINTF_FAILED failed written=%lu remaining=%lu %d %d %s\n", written, remaining_size, ferror(out), errval, strerror(errno));
+
+         if (retries++ > 5) {
+            fprintf(stderr, "DMLOG FPRINTF_FAILED enough is enough\n");
+            exit(1);
+         }
+
+         message_ptr = &message_ptr[written];
+         remaining_size -= written;
+      }
+
+      // We don't `fflush`, rather we made `stdout` unbuffered with `setbuf`. This way we have
+      // atomic error handling and retry logic up here ^^.
+   }
+}
diff --git a/libraries/fc/src/log/logger_config.cpp b/libraries/fc/src/log/logger_config.cpp
index e6ef923..50eaa06 100644
--- a/libraries/fc/src/log/logger_config.cpp
+++ b/libraries/fc/src/log/logger_config.cpp
@@ -5,6 +5,7 @@
 #include <unordered_map>
 #include <string>
 #include <fc/log/console_appender.hpp>
+#include <fc/log/deep_mind_appender.hpp>
 #include <fc/log/gelf_appender.hpp>
 #include <fc/reflect/variant.hpp>
 #include <fc/exception/exception.hpp>
@@ -22,6 +23,7 @@ namespace fc {
    {
       try {
       static bool reg_console_appender = appender::register_appender<console_appender>( "console" );
+      static bool reg_deep_mind_appender = appender::register_appender<deep_mind_appender>( "deep-mind" );
       static bool reg_gelf_appender = appender::register_appender<gelf_appender>( "gelf" );
       get_logger_map().clear();
       get_appender_map().clear();
@@ -47,7 +49,7 @@ namespace fc {
             if( ap ) { lgr.add_appender(ap); }
          }
       }
-      return reg_console_appender || reg_gelf_appender;
+      return reg_console_appender || reg_deep_mind_appender || reg_gelf_appender;
       } catch ( exception& e )
       {
          std::cerr<<e.to_detail_string()<<"\n";
@@ -77,11 +79,23 @@ namespace fc {
                      ( "level_colors", c )
                  ) );
 
+      cfg.appenders.push_back(
+             appender_config( "deep-mind", "deep-mind" )
+      );
+
       logger_config dlc;
       dlc.name = "default";
       dlc.level = log_level::info;
       dlc.appenders.push_back("stderr");
+
+      logger_config dmlc;
+      dmlc.name = "deep-mind";
+      dmlc.level = log_level::debug;
+      dmlc.enabled = true;
+      dmlc.appenders.push_back("deep-mind");
+
       cfg.loggers.push_back( dlc );
+      cfg.loggers.push_back( dmlc );
       return cfg;
    }
 
