diff --git a/plugins/producer_plugin/include/eosio/producer_plugin/producer_plugin.hpp b/plugins/producer_plugin/include/eosio/producer_plugin/producer_plugin.hpp
index f2e50e928..7b9674215 100644
--- a/plugins/producer_plugin/include/eosio/producer_plugin/producer_plugin.hpp
+++ b/plugins/producer_plugin/include/eosio/producer_plugin/producer_plugin.hpp
@@ -23,6 +23,7 @@ public:
       fc::optional<int32_t> max_irreversible_block_age;
       fc::optional<int32_t> produce_time_offset_us;
       fc::optional<int32_t> last_block_time_offset_us;
+      fc::optional<int32_t> max_scheduled_transaction_time_per_block_ms;
       fc::optional<int32_t> subjective_cpu_leeway_us;
       fc::optional<double>  incoming_defer_ratio;
    };
diff --git a/plugins/producer_plugin/producer_plugin.cpp b/plugins/producer_plugin/producer_plugin.cpp
index 5d2cd5637..a57d240ed 100644
--- a/plugins/producer_plugin/producer_plugin.cpp
+++ b/plugins/producer_plugin/producer_plugin.cpp
@@ -136,6 +136,7 @@ class producer_plugin_impl : public std::enable_shared_from_this<producer_plugin
       fc::microseconds                                          _max_irreversible_block_age_us;
       int32_t                                                   _produce_time_offset_us = 0;
       int32_t                                                   _last_block_time_offset_us = 0;
+      int32_t                                                   _max_scheduled_transaction_time_per_block_ms;
       fc::time_point                                            _irreversible_block_time;
       fc::microseconds                                          _keosd_provider_timeout_us;

@@ -395,9 +396,10 @@ class producer_plugin_impl : public std::enable_shared_from_this<producer_plugin

          auto deadline = fc::time_point::now() + fc::milliseconds(_max_transaction_time_ms);
          bool deadline_is_subjective = false;
-         if (_max_transaction_time_ms < 0 || (_pending_block_mode == pending_block_mode::producing && block_time < deadline) ) {
+         const auto block_deadline = calculate_block_deadline(block_time);
+         if (_max_transaction_time_ms < 0 || (_pending_block_mode == pending_block_mode::producing && block_deadline < deadline) ) {
             deadline_is_subjective = true;
-            deadline = block_time;
+            deadline = block_deadline;
          }

          try {
@@ -455,9 +457,10 @@ class producer_plugin_impl : public std::enable_shared_from_this<producer_plugin
          exhausted
       };

-      start_block_result start_block(bool &last_block);
+      start_block_result start_block();

       fc::time_point calculate_pending_block_time() const;
+      fc::time_point calculate_block_deadline( const fc::time_point& ) const;
       void schedule_delayed_production_loop(const std::weak_ptr<producer_plugin_impl>& weak_this, const block_timestamp_type& current_block_time);
 };

@@ -526,6 +529,8 @@ void producer_plugin::set_program_options(
           "offset of non last block producing time in microseconds. Negative number results in blocks to go out sooner, and positive number results in blocks to go out later")
          ("last-block-time-offset-us", boost::program_options::value<int32_t>()->default_value(0),
           "offset of last block producing time in microseconds. Negative number results in blocks to go out sooner, and positive number results in blocks to go out later")
+         ("max-scheduled-transaction-time-per-block-ms", boost::program_options::value<int32_t>()->default_value(100),
+          "Maximum wall-clock time, in milliseconds, spent retiring scheduled transactions in any block before returning to normal transaction processing.")
          ("incoming-defer-ratio", bpo::value<double>()->default_value(1.0),
           "ratio between incoming transations and deferred transactions when both are exhausted")
          ("snapshots-dir", bpo::value<bfs::path>()->default_value("snapshots"),
@@ -652,6 +657,8 @@ void producer_plugin::plugin_initialize(const boost::program_options::variables_

    my->_last_block_time_offset_us = options.at("last-block-time-offset-us").as<int32_t>();

+   my->_max_scheduled_transaction_time_per_block_ms = options.at("max-scheduled-transaction-time-per-block-ms").as<int32_t>();
+
    my->_max_transaction_time_ms = options.at("max-transaction-time").as<int32_t>();

    my->_max_irreversible_block_age_us = fc::seconds(options.at("max-irreversible-block-age").as<int32_t>());
@@ -803,6 +810,10 @@ void producer_plugin::update_runtime_options(const runtime_options& options) {
       my->_last_block_time_offset_us = *options.last_block_time_offset_us;
    }

+   if (options.max_scheduled_transaction_time_per_block_ms) {
+      my->_max_scheduled_transaction_time_per_block_ms = *options.max_scheduled_transaction_time_per_block_ms;
+   }
+
    if (options.incoming_defer_ratio) {
       my->_incoming_defer_ratio = *options.incoming_defer_ratio;
    }
@@ -824,7 +835,8 @@ producer_plugin::runtime_options producer_plugin::get_runtime_options() const {
       my->_max_transaction_time_ms,
       my->_max_irreversible_block_age_us.count() < 0 ? -1 : my->_max_irreversible_block_age_us.count() / 1'000'000,
       my->_produce_time_offset_us,
-      my->_last_block_time_offset_us
+      my->_last_block_time_offset_us,
+      my->_max_scheduled_transaction_time_per_block_ms
    };
 }

@@ -993,6 +1005,11 @@ fc::time_point producer_plugin_impl::calculate_pending_block_time() const {
    return block_time;
 }

+fc::time_point producer_plugin_impl::calculate_block_deadline( const fc::time_point& block_time ) const {
+   bool last_block = ((block_timestamp_type(block_time).slot % config::producer_repetitions) == config::producer_repetitions - 1);
+   return block_time + fc::microseconds(last_block ? _last_block_time_offset_us : _produce_time_offset_us);
+}
+
 enum class tx_category {
    PERSISTED,
    UNEXPIRED_UNPERSISTED,
@@ -1000,7 +1017,7 @@ enum class tx_category {
 };


-producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool &last_block) {
+producer_plugin_impl::start_block_result producer_plugin_impl::start_block() {
    chain::controller& chain = app().get_plugin<chain_plugin>().chain();

    if( chain.get_read_mode() == chain::db_read_mode::READ_ONLY )
@@ -1016,7 +1033,6 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
    _pending_block_mode = pending_block_mode::producing;

    // Not our turn
-   last_block = ((block_timestamp_type(block_time).slot % config::producer_repetitions) == config::producer_repetitions - 1);
    const auto& scheduled_producer = hbs->get_scheduled_producer(block_time);
    auto currrent_watermark_itr = _producer_watermarks.find(scheduled_producer.producer_name);
    auto signature_provider_itr = _signature_providers.find(scheduled_producer.block_signing_key);
@@ -1081,6 +1097,7 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool

    const auto& pbs = chain.pending_block_state();
    if (pbs) {
+      const fc::time_point preprocess_deadline = calculate_block_deadline(block_time);

       if (_pending_block_mode == pending_block_mode::producing && pbs->block_signing_key != scheduled_producer.block_signing_key) {
          elog("Block Signing Key is not expected value, reverting to speculative mode! [expected: \"${expected}\", actual: \"${actual\"", ("expected", scheduled_producer.block_signing_key)("actual", pbs->block_signing_key));
@@ -1163,7 +1180,7 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
                int num_processed = 0;

                for (const auto& trx: apply_trxs) {
-                  if (block_time <= fc::time_point::now()) exhausted = true;
+                  if (preprocess_deadline <= fc::time_point::now()) exhausted = true;
                   if (exhausted) {
                      break;
                   }
@@ -1173,9 +1190,9 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
                   try {
                      auto deadline = fc::time_point::now() + fc::milliseconds(_max_transaction_time_ms);
                      bool deadline_is_subjective = false;
-                     if (_max_transaction_time_ms < 0 || (_pending_block_mode == pending_block_mode::producing && block_time < deadline)) {
+                     if (_max_transaction_time_ms < 0 || (_pending_block_mode == pending_block_mode::producing && preprocess_deadline < deadline)) {
                         deadline_is_subjective = true;
-                        deadline = block_time;
+                        deadline = preprocess_deadline;
                      }

                      auto trace = chain.push_transaction(trx, deadline);
@@ -1228,8 +1245,16 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
                int num_failed = 0;
                int num_processed = 0;

+               auto scheduled_trx_deadline = preprocess_deadline;
+               if (_max_scheduled_transaction_time_per_block_ms >= 0) {
+                  scheduled_trx_deadline = std::min<fc::time_point>(
+                        scheduled_trx_deadline,
+                        fc::time_point::now() + fc::milliseconds(_max_scheduled_transaction_time_per_block_ms)
+                  );
+               }
+
                for (const auto& trx : scheduled_trxs) {
-                  if (block_time <= fc::time_point::now()) exhausted = true;
+                  if (scheduled_trx_deadline <= fc::time_point::now()) exhausted = true;
                   if (exhausted) {
                      break;
                   }
@@ -1238,6 +1263,8 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool

                   // configurable ratio of incoming txns vs deferred txns
                   while (_incoming_trx_weight >= 1.0 && orig_pending_txn_size && _pending_incoming_transactions.size()) {
+                     if (scheduled_trx_deadline <= fc::time_point::now()) break;
+
                      auto e = _pending_incoming_transactions.front();
                      _pending_incoming_transactions.pop_front();
                      --orig_pending_txn_size;
@@ -1245,7 +1272,7 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
                      on_incoming_transaction_async(std::get<0>(e), std::get<1>(e), std::get<2>(e));
                   }

-                  if (block_time <= fc::time_point::now()) {
+                  if (scheduled_trx_deadline <= fc::time_point::now()) {
                      exhausted = true;
                      break;
                   }
@@ -1257,9 +1284,9 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
                   try {
                      auto deadline = fc::time_point::now() + fc::milliseconds(_max_transaction_time_ms);
                      bool deadline_is_subjective = false;
-                     if (_max_transaction_time_ms < 0 || (_pending_block_mode == pending_block_mode::producing && block_time < deadline)) {
+                     if (_max_transaction_time_ms < 0 || (_pending_block_mode == pending_block_mode::producing && scheduled_trx_deadline < deadline)) {
                         deadline_is_subjective = true;
-                        deadline = block_time;
+                        deadline = scheduled_trx_deadline;
                      }

                      auto trace = chain.push_scheduled_transaction(trx, deadline);
@@ -1293,7 +1320,7 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
             }
          }

-         if (exhausted || block_time <= fc::time_point::now()) {
+         if (exhausted || preprocess_deadline <= fc::time_point::now()) {
             return start_block_result::exhausted;
          } else {
             // attempt to apply any pending incoming transactions
@@ -1306,7 +1333,7 @@ producer_plugin_impl::start_block_result producer_plugin_impl::start_block(bool
                   _pending_incoming_transactions.pop_front();
                   --orig_pending_txn_size;
                   on_incoming_transaction_async(std::get<0>(e), std::get<1>(e), std::get<2>(e));
-                  if (block_time <= fc::time_point::now()) return start_block_result::exhausted;
+                  if (preprocess_deadline <= fc::time_point::now()) return start_block_result::exhausted;
                }
             }
             return start_block_result::succeeded;
@@ -1327,8 +1354,7 @@ void producer_plugin_impl::schedule_production_loop() {
    _timer.cancel();
    std::weak_ptr<producer_plugin_impl> weak_this = shared_from_this();

-   bool last_block;
-   auto result = start_block(last_block);
+   auto result = start_block();

    if (result == start_block_result::failed) {
       elog("Failed to start a pending block, will try again later");
@@ -1354,11 +1380,12 @@ void producer_plugin_impl::schedule_production_loop() {

       // we succeeded but block may be exhausted
       static const boost::posix_time::ptime epoch(boost::gregorian::date(1970, 1, 1));
-      if (result == start_block_result::succeeded) {
+      auto deadline = calculate_block_deadline(chain.pending_block_time());
+
+      if (deadline > fc::time_point::now()) {
          // ship this block off no later than its deadline
          EOS_ASSERT( chain.pending_block_state(), missing_pending_block_state, "producing without pending_block_state, start_block succeeded" );
-         auto deadline = chain.pending_block_time().time_since_epoch().count() + (last_block ? _last_block_time_offset_us : _produce_time_offset_us);
-         _timer.expires_at( epoch + boost::posix_time::microseconds( deadline ));
+         _timer.expires_at( epoch + boost::posix_time::microseconds( deadline.time_since_epoch().count() ));
          fc_dlog(_log, "Scheduling Block Production on Normal Block #${num} for ${time}", ("num", chain.pending_block_state()->block_num)("time",deadline));
       } else {
          EOS_ASSERT( chain.pending_block_state(), missing_pending_block_state, "producing without pending_block_state" );
