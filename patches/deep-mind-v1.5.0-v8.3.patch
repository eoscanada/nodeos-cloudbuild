diff --git a/libraries/chain/apply_context.cpp b/libraries/chain/apply_context.cpp
index c7b0fc371..dd04aa996 100644
--- a/libraries/chain/apply_context.cpp
+++ b/libraries/chain/apply_context.cpp
@@ -114,10 +114,13 @@ void apply_context::exec( action_trace& trace )
 {
    _notified.push_back(receiver);
    exec_one( trace );
+   trx_context.action_id.increment();
+
    for( uint32_t i = 1; i < _notified.size(); ++i ) {
       receiver = _notified[i];
       trace.inline_traces.emplace_back( );
       exec_one( trace.inline_traces.back() );
+      trx_context.action_id.increment();
    }
 
    if( _cfa_inline_actions.size() > 0 || _inline_actions.size() > 0 ) {
@@ -301,14 +304,37 @@ void apply_context::schedule_deferred_transaction( const uint128_t& sender_id, a
    if ( auto ptr = db.find<generated_transaction_object,by_sender_id>(boost::make_tuple(receiver, sender_id)) ) {
       EOS_ASSERT( replace_existing, deferred_tx_duplicate, "deferred transaction with the same sender_id and payer already exists" );
 
+      // DEEP_MIND: skip this, we want to test it, as it happened on mainnet before
+      // DEEP_MIND: this means we NEVER should use `deep_mind` on our producer nodes.
+      if (!eosio::chain::chain_config::deep_mind_test_enabled) {
       // TODO: Remove the following subjective check when the deferred trx replacement RAM bug has been fixed with a hard fork.
       EOS_ASSERT( !control.is_producing_block(), subjective_block_production_exception,
                   "Replacing a deferred transaction is temporarily disabled." );
+      }
 
       // TODO: The logic of the next line needs to be incorporated into the next hard fork.
-      // add_ram_usage( ptr->payer, -(config::billable_size_v<generated_transaction_object> + ptr->packed_trx.size()) );
+      // add_ram_usage( ptr->payer, -(config::billable_size_v<generated_transaction_object> + ptr->packed_trx.size()), "deferred_trx_cancel" );
 
       db.modify<generated_transaction_object>( *ptr, [&]( auto& gtx ) {
+            if (eosio::chain::chain_config::deep_mind_enabled) {
+
+              // unpack gtx->packed_trx into `trx` REVISE THIS!
+              fc::datastream<const char*> ds( gtx.packed_trx.data(), gtx.packed_trx.size() );
+              transaction dtrx;
+              fc::raw::unpack(ds, static_cast<transaction&>(dtrx) );
+
+              dmlog("DEFRTRX MODIFY_CANCEL ${rev} ${action_id} ${sender} ${sender_id} ${payer} ${published} ${delay} ${expiration} ${trx_id} ${trx}",
+                      ("rev", db.revision()-1)
+                      ("action_id", trx_context.action_id.current())
+                      ("sender", receiver)
+                      ("sender_id", sender_id)
+                      ("payer", gtx.payer)
+                      ("published", gtx.published)
+                      ("delay", gtx.delay_until)
+                      ("expiration", gtx.expiration)
+                      ("trx_id", dtrx.id())
+                      ("trx", control.to_variant_with_abi(dtrx, fc::microseconds(5000000))));
+            }
             gtx.sender      = receiver;
             gtx.sender_id   = sender_id;
             gtx.payer       = payer;
@@ -317,6 +343,20 @@ void apply_context::schedule_deferred_transaction( const uint128_t& sender_id, a
             gtx.expiration  = gtx.delay_until + fc::seconds(control.get_global_properties().configuration.deferred_trx_expiration_window);
 
             trx_size = gtx.set( trx );
+
+            if (eosio::chain::chain_config::deep_mind_enabled) {
+                dmlog("DEFRTRX MODIFY_CREATE ${rev} ${action_id} ${sender} ${sender_id} ${payer} ${published} ${delay} ${expiration} ${trx_id} ${trx}",
+                        ("rev", db.revision()-1)
+                        ("action_id", trx_context.action_id.current())
+                        ("sender", receiver)
+                        ("sender_id", sender_id)
+                        ("payer", payer)
+                        ("published", gtx.published)
+                        ("delay", gtx.delay_until)
+                        ("expiration", gtx.expiration)
+                        ("trx_id", trx.id())
+                        ("trx", control.to_variant_with_abi(trx, fc::microseconds(5000000))));
+            }
          });
    } else {
       db.create<generated_transaction_object>( [&]( auto& gtx ) {
@@ -329,19 +369,54 @@ void apply_context::schedule_deferred_transaction( const uint128_t& sender_id, a
             gtx.expiration  = gtx.delay_until + fc::seconds(control.get_global_properties().configuration.deferred_trx_expiration_window);
 
             trx_size = gtx.set( trx );
+
+            if (eosio::chain::chain_config::deep_mind_enabled) {
+                dmlog("DEFRTRX CREATE ${rev} ${action_id} ${sender} ${sender_id} ${payer} ${published} ${delay} ${expiration} ${trx_id} ${trx}",
+                        ("rev", db.revision()-1)
+                        ("action_id", trx_context.action_id.current())
+                        ("sender", receiver)
+                        ("sender_id", sender_id)
+                        ("payer", payer)
+                        ("published", gtx.published)
+                        ("delay", gtx.delay_until)
+                        ("expiration", gtx.expiration)
+                        ("trx_id", trx.id())
+                        ("trx", control.to_variant_with_abi(trx, fc::microseconds(5000000))));
+            }
          });
    }
 
    EOS_ASSERT( control.is_ram_billing_in_notify_allowed() || (receiver == act.account) || (receiver == payer) || privileged,
                subjective_block_production_exception, "Cannot charge RAM to other accounts during notify." );
-   add_ram_usage( payer, (config::billable_size_v<generated_transaction_object> + trx_size) );
+
+   add_ram_usage( payer, (config::billable_size_v<generated_transaction_object> + trx_size), "deferred_trx_add" );
 }
 
 bool apply_context::cancel_deferred_transaction( const uint128_t& sender_id, account_name sender ) {
    auto& generated_transaction_idx = db.get_mutable_index<generated_transaction_multi_index>();
    const auto* gto = db.find<generated_transaction_object,by_sender_id>(boost::make_tuple(sender, sender_id));
    if ( gto ) {
-      add_ram_usage( gto->payer, -(config::billable_size_v<generated_transaction_object> + gto->packed_trx.size()) );
+      if (eosio::chain::chain_config::deep_mind_enabled) {
+        // unpack gtx->packed_trx into `dtrx` REVISE THIS!
+        auto gtx = generated_transaction(*gto);
+        fc::datastream<const char*> ds( gtx.packed_trx.data(), gtx.packed_trx.size() );
+        transaction dtrx;
+        fc::raw::unpack(ds, static_cast<transaction&>(dtrx) );
+
+        dmlog("DEFRTRX CANCEL ${rev} ${action_id} ${sender} ${sender_id} ${payer} ${published} ${delay} ${expiration} ${trx_id} ${trx}",
+                ("rev", db.revision()-1)
+                ("action_id", trx_context.action_id.current())
+                ("sender", receiver)
+                ("sender_id", sender_id)
+                ("payer", gto->payer)
+                ("published", gto->published)
+                ("delay", gto->delay_until)
+                ("expiration", gto->expiration)
+                ("trx_id", dtrx.id())
+                ("trx", control.to_variant_with_abi(dtrx, fc::microseconds(5000000))));
+      }
+
+      add_ram_usage( gto->payer, -(config::billable_size_v<generated_transaction_object> + gto->packed_trx.size()), "deferred_trx_cancel" );
       generated_transaction_idx.remove(*gto);
    }
    return gto;
@@ -357,7 +432,7 @@ const table_id_object& apply_context::find_or_create_table( name code, name scop
       return *existing_tid;
    }
 
-   update_db_usage(payer, config::billable_size_v<table_id_object>);
+   update_db_usage(payer, config::billable_size_v<table_id_object>, "create_table");
 
    return db.create<table_id_object>([&](table_id_object &t_id){
       t_id.code = code;
@@ -368,7 +443,7 @@ const table_id_object& apply_context::find_or_create_table( name code, name scop
 }
 
 void apply_context::remove_table( const table_id_object& tid ) {
-   update_db_usage(tid.payer, - config::billable_size_v<table_id_object>);
+   update_db_usage(tid.payer, - config::billable_size_v<table_id_object>, "remove_table");
    db.remove(tid);
 }
 
@@ -392,7 +467,7 @@ bytes apply_context::get_packed_transaction() {
    return r;
 }
 
-void apply_context::update_db_usage( const account_name& payer, int64_t delta ) {
+void apply_context::update_db_usage( const account_name& payer, int64_t delta, const char* operation ) {
    if( delta > 0 ) {
       if( !(privileged || payer == account_name(receiver)) ) {
          EOS_ASSERT( control.is_ram_billing_in_notify_allowed() || (receiver == act.account),
@@ -400,7 +475,7 @@ void apply_context::update_db_usage( const account_name& payer, int64_t delta )
          require_authorization( payer );
       }
    }
-   add_ram_usage(payer, delta);
+   add_ram_usage(payer, delta, operation);
 }
 
 
@@ -469,7 +544,21 @@ int apply_context::db_store_i64( uint64_t code, uint64_t scope, uint64_t table,
    });
 
    int64_t billable_size = (int64_t)(buffer_size + config::billable_size_v<key_value_object>);
-   update_db_usage( payer, billable_size);
+   update_db_usage( payer, billable_size, "primary_index_add" );
+
+   if (eosio::chain::chain_config::deep_mind_db_enabled) {
+      auto table_obj = tab;
+      dmlog("DB_OPERATION INS ${rev} ${action_id} ${payer} ${table_code} ${scope} ${table_name} ${primkey} ${ndata}",
+              ("rev", db.revision()-1)
+              ("action_id", trx_context.action_id.current())
+              ("payer", payer)
+              ("table_code", table_obj.code)
+              ("scope", table_obj.scope)
+              ("table_name", table_obj.table)
+              ("primkey", name(obj.primary_key))
+              ("ndata", to_hex(buffer, buffer_size))
+      );
+   }
 
    keyval_cache.cache_table( tab );
    return keyval_cache.add( obj );
@@ -491,12 +580,27 @@ void apply_context::db_update_i64( int iterator, account_name payer, const char*
 
    if( account_name(obj.payer) != payer ) {
       // refund the existing payer
-      update_db_usage( obj.payer,  -(old_size) );
+      update_db_usage( obj.payer, -(old_size), "primary_index_update_remove_old_payer" );
       // charge the new payer
-      update_db_usage( payer,  (new_size));
+      update_db_usage( payer,  (new_size), "primary_index_update_add_new_payer" );
    } else if(old_size != new_size) {
       // charge/refund the existing payer the difference
-      update_db_usage( obj.payer, new_size - old_size);
+      update_db_usage( obj.payer, new_size - old_size, "primary_index_update" );
+   }
+
+   if (eosio::chain::chain_config::deep_mind_db_enabled) {
+      dmlog("DB_OPERATION UPD ${rev} ${action_id} ${opayer}:${npayer} ${table_code} ${scope} ${table_name} ${primkey} ${odata} ${ndata}",
+              ("rev", db.revision()-1)
+              ("action_id", trx_context.action_id.current())
+              ("opayer", obj.payer)
+              ("npayer", payer)
+              ("table_code", table_obj.code)
+              ("scope", table_obj.scope)
+              ("table_name", table_obj.table)
+              ("primkey", name(obj.primary_key))
+              ("odata", to_hex(obj.value.data(),obj.value.size()))
+              ("ndata", to_hex(buffer, buffer_size))
+      );
    }
 
    db.modify( obj, [&]( auto& o ) {
@@ -514,7 +618,20 @@ void apply_context::db_remove_i64( int iterator ) {
 
 //   require_write_lock( table_obj.scope );
 
-   update_db_usage( obj.payer,  -(obj.value.size() + config::billable_size_v<key_value_object>) );
+   update_db_usage( obj.payer,  -(obj.value.size() + config::billable_size_v<key_value_object>), "primary_index_remove" );
+
+   if (eosio::chain::chain_config::deep_mind_db_enabled) {
+      dmlog("DB_OPERATION REM ${rev} ${action_id} ${payer} ${table_code} ${scope} ${table_name} ${primkey} ${odata}",
+              ("rev", db.revision()-1)
+              ("action_id", trx_context.action_id.current())
+              ("payer", obj.payer)
+              ("table_code", table_obj.code)
+              ("scope", table_obj.scope)
+              ("table_name", table_obj.table)
+              ("primkey", name(obj.primary_key))
+              ("odata", to_hex(obj.value.data(), obj.value.size()))
+      );
+   }
 
    db.modify( table_obj, [&]( auto& t ) {
       --t.count;
@@ -665,8 +782,8 @@ uint64_t apply_context::next_auth_sequence( account_name actor ) {
    return rs.auth_sequence;
 }
 
-void apply_context::add_ram_usage( account_name account, int64_t ram_delta ) {
-   trx_context.add_ram_usage( account, ram_delta );
+void apply_context::add_ram_usage( account_name account, int64_t ram_delta, const char* operation ) {
+   trx_context.add_ram_usage( account, ram_delta, operation );
 
    auto p = _account_ram_deltas.emplace( account, ram_delta );
    if( !p.second ) {
diff --git a/libraries/chain/chain_config.cpp b/libraries/chain/chain_config.cpp
index 974675749..766f8b251 100644
--- a/libraries/chain/chain_config.cpp
+++ b/libraries/chain/chain_config.cpp
@@ -8,6 +8,10 @@
 
 namespace eosio { namespace chain {
 
+   bool chain_config::deep_mind_enabled(false);
+   bool chain_config::deep_mind_test_enabled(false);
+   bool chain_config::deep_mind_db_enabled(false);
+
    void chain_config::validate()const {
       EOS_ASSERT( target_block_net_usage_pct <= config::percent_100, action_validate_exception,
                   "target block net usage percentage cannot exceed 100%" );
diff --git a/libraries/chain/controller.cpp b/libraries/chain/controller.cpp
index 4d980d510..483e583cf 100644
--- a/libraries/chain/controller.cpp
+++ b/libraries/chain/controller.cpp
@@ -644,7 +644,7 @@ struct controller_impl {
       ram_delta += owner_permission.auth.get_billable_size();
       ram_delta += active_permission.auth.get_billable_size();
 
-      resource_limits.add_pending_ram_usage(name, ram_delta);
+      resource_limits.add_pending_ram_usage(name, ram_delta, 0, "newaccount");
       resource_limits.verify_account_ram_usage(name);
    }
 
@@ -794,7 +794,9 @@ struct controller_impl {
    void remove_scheduled_transaction( const generated_transaction_object& gto ) {
       resource_limits.add_pending_ram_usage(
          gto.payer,
-         -(config::billable_size_v<generated_transaction_object> + gto.packed_trx.size())
+         -(config::billable_size_v<generated_transaction_object> + gto.packed_trx.size()),
+         0,
+         "deferred_trx_removed"
       );
       // No need to verify_account_ram_usage since we are only reducing memory
 
@@ -920,6 +922,13 @@ struct controller_impl {
          trace->except = e;
          trace->except_ptr = std::current_exception();
          trace->elapsed = fc::time_point::now() - trx_context.start;
+
+         if (eosio::chain::chain_config::deep_mind_enabled) {
+           dmlog("DEFRTRX FAILED ${rev} ${action_id}",
+                  ("rev", db.revision()-1)
+                  ("action_id", trx_context.action_id.current())
+           );
+         }
       }
       trx_context.undo();
 
diff --git a/libraries/chain/eosio_contract.cpp b/libraries/chain/eosio_contract.cpp
index e41fe8158..77d77b7ed 100644
--- a/libraries/chain/eosio_contract.cpp
+++ b/libraries/chain/eosio_contract.cpp
@@ -121,7 +121,7 @@ void apply_eosio_newaccount(apply_context& context) {
    ram_delta += owner_permission.auth.get_billable_size();
    ram_delta += active_permission.auth.get_billable_size();
 
-   context.add_ram_usage(create.name, ram_delta);
+   context.add_ram_usage(create.name, ram_delta, "newaccount");
 
 } FC_CAPTURE_AND_RETHROW( (create) ) }
 
@@ -167,7 +167,7 @@ void apply_eosio_setcode(apply_context& context) {
    });
 
    if (new_size != old_size) {
-      context.add_ram_usage( act.account, new_size - old_size );
+      context.add_ram_usage( act.account, new_size - old_size, "setcode" );
    }
 }
 
@@ -196,7 +196,7 @@ void apply_eosio_setabi(apply_context& context) {
    });
 
    if (new_size != old_size) {
-      context.add_ram_usage( act.account, new_size - old_size );
+      context.add_ram_usage( act.account, new_size - old_size, "setabi" );
    }
 }
 
@@ -254,13 +254,13 @@ void apply_eosio_updateauth(apply_context& context) {
 
       int64_t new_size = (int64_t)(config::billable_size_v<permission_object> + permission->auth.get_billable_size());
 
-      context.add_ram_usage( permission->owner, new_size - old_size );
+      context.add_ram_usage( permission->owner, new_size - old_size, "updateauth_update" );
    } else {
       const auto& p = authorization.create_permission( update.account, update.permission, parent_id, update.auth );
 
       int64_t new_size = (int64_t)(config::billable_size_v<permission_object> + p.auth.get_billable_size());
 
-      context.add_ram_usage( update.account, new_size );
+      context.add_ram_usage( update.account, new_size, "updateauth_create" );
    }
 }
 
@@ -291,8 +291,7 @@ void apply_eosio_deleteauth(apply_context& context) {
 
    authorization.remove_permission( permission );
 
-   context.add_ram_usage( remove.account, -old_size );
-
+   context.add_ram_usage( remove.account, -old_size, "deleteauth" );
 }
 
 void apply_eosio_linkauth(apply_context& context) {
@@ -336,7 +335,8 @@ void apply_eosio_linkauth(apply_context& context) {
 
          context.add_ram_usage(
             l.account,
-            (int64_t)(config::billable_size_v<permission_link_object>)
+            (int64_t)(config::billable_size_v<permission_link_object>),
+            "linkauth"
          );
       }
 
@@ -354,9 +354,11 @@ void apply_eosio_unlinkauth(apply_context& context) {
    auto link_key = boost::make_tuple(unlink.account, unlink.code, unlink.type);
    auto link = db.find<permission_link_object, by_action_name>(link_key);
    EOS_ASSERT(link != nullptr, action_validate_exception, "Attempting to unlink authority, but no link found");
+
    context.add_ram_usage(
       link->account,
-      -(int64_t)(config::billable_size_v<permission_link_object>)
+      -(int64_t)(config::billable_size_v<permission_link_object>),
+      "unlinkauth"
    );
 
    db.remove(*link);
diff --git a/libraries/chain/include/eosio/chain/apply_context.hpp b/libraries/chain/include/eosio/chain/apply_context.hpp
index f0662ca5c..d5a7e58b3 100644
--- a/libraries/chain/include/eosio/chain/apply_context.hpp
+++ b/libraries/chain/include/eosio/chain/apply_context.hpp
@@ -196,7 +196,7 @@ class apply_context {
                  ++t.count;
                });
 
-               context.update_db_usage( payer, config::billable_size_v<ObjectType> );
+               context.update_db_usage( payer, config::billable_size_v<ObjectType>, "secondary_index_add" );
 
                itr_cache.cache_table( tab );
                return itr_cache.add( obj );
@@ -204,7 +204,7 @@ class apply_context {
 
             void remove( int iterator ) {
                const auto& obj = itr_cache.get( iterator );
-               context.update_db_usage( obj.payer, -( config::billable_size_v<ObjectType> ) );
+               context.update_db_usage( obj.payer, -( config::billable_size_v<ObjectType> ), "secondary_index_remove" );
 
                const auto& table_obj = itr_cache.get_table( obj.t_id );
                EOS_ASSERT( table_obj.code == context.receiver, table_access_violation, "db access violation" );
@@ -236,8 +236,8 @@ class apply_context {
                int64_t billing_size =  config::billable_size_v<ObjectType>;
 
                if( obj.payer != payer ) {
-                  context.update_db_usage( obj.payer, -(billing_size) );
-                  context.update_db_usage( payer, +(billing_size) );
+                  context.update_db_usage( obj.payer, -(billing_size), "secondary_index_update_remove_old_payer" );
+                  context.update_db_usage( payer, +(billing_size), "secondary_index_update_add_new_payer" );
                }
 
                context.db.modify( obj, [&]( auto& o ) {
@@ -538,7 +538,7 @@ class apply_context {
    /// Database methods:
    public:
 
-      void update_db_usage( const account_name& payer, int64_t delta );
+      void update_db_usage( const account_name& payer, int64_t delta, const char* string );
 
       int  db_store_i64( uint64_t scope, uint64_t table, const account_name& payer, uint64_t id, const char* buffer, size_t buffer_size );
       void db_update_i64( int iterator, account_name payer, const char* buffer, size_t buffer_size );
@@ -572,7 +572,7 @@ class apply_context {
       uint64_t next_recv_sequence( account_name receiver );
       uint64_t next_auth_sequence( account_name actor );
 
-      void add_ram_usage( account_name account, int64_t ram_delta );
+      void add_ram_usage( account_name account, int64_t ram_delta, const char* operation );
       void finalize_trace( action_trace& trace, const fc::time_point& start );
 
    /// Fields:
diff --git a/libraries/chain/include/eosio/chain/chain_config.hpp b/libraries/chain/include/eosio/chain/chain_config.hpp
index f51a8b238..ae0e065ba 100644
--- a/libraries/chain/include/eosio/chain/chain_config.hpp
+++ b/libraries/chain/include/eosio/chain/chain_config.hpp
@@ -17,6 +17,10 @@ namespace eosio { namespace chain {
  * values specified by the producers.
  */
 struct chain_config {
+   static bool deep_mind_enabled;
+   static bool deep_mind_test_enabled;
+   static bool deep_mind_db_enabled;
+
    uint64_t   max_block_net_usage;                 ///< the maxiumum net usage in instructions for a block
    uint32_t   target_block_net_usage_pct;          ///< the target percent (1% == 100, 100%= 10,000) of maximum net usage; exceeding this triggers congestion handling
    uint32_t   max_transaction_net_usage;           ///< the maximum objectively measured net usage that the chain will allow regardless of account limits
diff --git a/libraries/chain/include/eosio/chain/resource_limits.hpp b/libraries/chain/include/eosio/chain/resource_limits.hpp
index 4b0c58bee..644b4246d 100644
--- a/libraries/chain/include/eosio/chain/resource_limits.hpp
+++ b/libraries/chain/include/eosio/chain/resource_limits.hpp
@@ -1,4 +1,5 @@
 #pragma once
+#include <eosio/chain/chain_config.hpp>
 #include <eosio/chain/exceptions.hpp>
 #include <eosio/chain/types.hpp>
 #include <eosio/chain/snapshot.hpp>
@@ -53,7 +54,7 @@ namespace eosio { namespace chain { namespace resource_limits {
          void update_account_usage( const flat_set<account_name>& accounts, uint32_t ordinal );
          void add_transaction_usage( const flat_set<account_name>& accounts, uint64_t cpu_usage, uint64_t net_usage, uint32_t ordinal );
 
-         void add_pending_ram_usage( const account_name account, int64_t ram_delta );
+         void add_pending_ram_usage( const account_name account, int64_t ram_delta, uint32_t action_id, const char* operation );
          void verify_account_ram_usage( const account_name accunt )const;
 
          /// set_account_limits returns true if new ram_bytes limit is more restrictive than the previously set one
diff --git a/libraries/chain/include/eosio/chain/transaction_context.hpp b/libraries/chain/include/eosio/chain/transaction_context.hpp
index 2e215f00e..b9ae4f83e 100644
--- a/libraries/chain/include/eosio/chain/transaction_context.hpp
+++ b/libraries/chain/include/eosio/chain/transaction_context.hpp
@@ -5,6 +5,18 @@
 
 namespace eosio { namespace chain {
 
+   class action_id {
+      public:
+        action_id(): id(0) {}
+
+        inline void increment() { id++; }
+        inline uint32_t current() { return id; }
+
+      private:
+        uint32_t id;
+   };
+
+
    struct deadline_timer {
          deadline_timer();
          ~deadline_timer();
@@ -63,7 +75,7 @@ namespace eosio { namespace chain {
          friend struct controller_impl;
          friend class apply_context;
 
-         void add_ram_usage( account_name account, int64_t ram_delta );
+         void add_ram_usage( account_name account, int64_t ram_delta, const char* operation );
 
          void dispatch_action( action_trace& trace, const action& a, account_name receiver, bool context_free = false, uint32_t recurse_depth = 0 );
          inline void dispatch_action( action_trace& trace, const action& a, bool context_free = false ) {
@@ -104,6 +116,8 @@ namespace eosio { namespace chain {
          int64_t                       billed_cpu_time_us = 0;
          bool                          explicit_billed_cpu_time = false;
 
+         /// kept to track ids of action_traces push via this transaction
+         action_id                     action_id;
       private:
          bool                          is_initialized = false;
 
diff --git a/libraries/chain/resource_limits.cpp b/libraries/chain/resource_limits.cpp
index fa38f76a1..1b669d0e4 100644
--- a/libraries/chain/resource_limits.cpp
+++ b/libraries/chain/resource_limits.cpp
@@ -185,7 +185,7 @@ void resource_limits_manager::add_transaction_usage(const flat_set<account_name>
    EOS_ASSERT( state.pending_net_usage <= config.net_limit_parameters.max, block_resource_exhausted, "Block has insufficient net resources" );
 }
 
-void resource_limits_manager::add_pending_ram_usage( const account_name account, int64_t ram_delta ) {
+void resource_limits_manager::add_pending_ram_usage( const account_name account, int64_t ram_delta, uint32_t action_id, const char* operation ) {
    if (ram_delta == 0) {
       return;
    }
@@ -199,6 +199,17 @@ void resource_limits_manager::add_pending_ram_usage( const account_name account,
 
    _db.modify( usage, [&]( auto& u ) {
      u.ram_usage += ram_delta;
+
+     if (eosio::chain::chain_config::deep_mind_enabled) {
+        dmlog("RAM_CONSUMED ${rev} ${action_id} ${operation} ${payer} ${new_usage} ${delta}",
+            ("rev", _db.revision()-1)
+            ("action_id", action_id)
+            ("operation", operation)
+            ("payer", account)
+            ("new_usage", u.ram_usage)
+            ("delta", ram_delta)
+        );
+     }
    });
 }
 
diff --git a/libraries/chain/transaction_context.cpp b/libraries/chain/transaction_context.cpp
index 989905ef9..69bccb040 100644
--- a/libraries/chain/transaction_context.cpp
+++ b/libraries/chain/transaction_context.cpp
@@ -523,9 +523,9 @@ namespace bacc = boost::accumulators;
       }
    }
 
-   void transaction_context::add_ram_usage( account_name account, int64_t ram_delta ) {
+   void transaction_context::add_ram_usage( account_name account, int64_t ram_delta, const char* operation ) {
       auto& rl = control.get_mutable_resource_limits_manager();
-      rl.add_pending_ram_usage( account, ram_delta );
+      rl.add_pending_ram_usage( account, ram_delta, action_id.current(), operation );
       if( ram_delta > 0 ) {
          validate_ram_usage.insert( account );
       }
@@ -596,9 +596,23 @@ namespace bacc = boost::accumulators;
         gto.delay_until = gto.published + delay;
         gto.expiration  = gto.delay_until + fc::seconds(control.get_global_properties().configuration.deferred_trx_expiration_window);
         trx_size = gto.set( trx );
+
+        if (eosio::chain::chain_config::deep_mind_enabled) {
+            dmlog("DEFRTRX PUSH_CREATE ${rev} ${action_id} ${sender} ${sender_id} ${payer} ${published} ${delay} ${expiration} ${trx_id} ${trx}",
+                    ("rev",  control.db().revision()-1)
+                    ("action_id", action_id.current())
+                    ("sender", gto.sender)
+                    ("sender_id", gto.sender_id)
+                    ("payer", gto.payer)
+                    ("published", gto.published)
+                    ("delay", gto.delay_until)
+                    ("expiration", gto.expiration)
+                    ("trx_id", trx.id())
+                    ("trx", control.to_variant_with_abi(trx, fc::microseconds(5000000))));
+        }
       });
 
-      add_ram_usage( cgto.payer, (config::billable_size_v<generated_transaction_object> + trx_size) );
+      add_ram_usage( cgto.payer, (config::billable_size_v<generated_transaction_object> + trx_size), "deferred_trx_pushed" );
    }
 
    void transaction_context::record_transaction( const transaction_id_type& id, fc::time_point_sec expire ) {
diff --git a/plugins/chain_plugin/chain_plugin.cpp b/plugins/chain_plugin/chain_plugin.cpp
index ad6731852..b98e67c82 100644
--- a/plugins/chain_plugin/chain_plugin.cpp
+++ b/plugins/chain_plugin/chain_plugin.cpp
@@ -222,6 +222,12 @@ void chain_plugin::set_program_options(options_description& cli, options_descrip
           "Number of worker threads in controller thread pool")
          ("contracts-console", bpo::bool_switch()->default_value(false),
           "print contract's output to console")
+         ("deep-mind-test", bpo::bool_switch()->default_value(false),
+          "enable testing instrumentation for deep-mind patches")
+         ("deep-mind", bpo::bool_switch()->default_value(false),
+          "print tx traces and blocks to console")
+         ("deep-mind-db", bpo::bool_switch()->default_value(false),
+          "print db deltas to console")
          ("actor-whitelist", boost::program_options::value<vector<string>>()->composing()->multitoken(),
           "Account added to actor whitelist (may specify multiple times)")
          ("actor-blacklist", boost::program_options::value<vector<string>>()->composing()->multitoken(),
@@ -341,6 +347,10 @@ void chain_plugin::plugin_initialize(const variables_map& options) {
          throw;
       }
 
+      eosio::chain::chain_config::deep_mind_enabled = options.at( "deep-mind" ).as<bool>();
+      eosio::chain::chain_config::deep_mind_test_enabled = options.at( "deep-mind-test" ).as<bool>();
+      eosio::chain::chain_config::deep_mind_db_enabled = options.at( "deep-mind-db" ).as<bool>();
+
       my->chain_config = controller::config();
 
       LOAD_VALUE_SET( options, "sender-bypass-whiteblacklist", my->chain_config->sender_bypass_whiteblacklist );
@@ -674,6 +684,12 @@ void chain_plugin::plugin_initialize(const variables_map& options) {
             } );
 
       my->accepted_block_connection = my->chain->accepted_block.connect( [this]( const block_state_ptr& blk ) {
+         if (eosio::chain::chain_config::deep_mind_enabled) {
+            dmlog( "ACCEPTED_BLOCK ${num} ${blk}",
+              ("num", blk->block_num)
+              ("blk", chain().to_variant_with_abi(blk, fc::microseconds(5000000)))
+            );
+         }
          my->accepted_block_channel.publish( blk );
       } );
 
@@ -688,6 +704,12 @@ void chain_plugin::plugin_initialize(const variables_map& options) {
 
       my->applied_transaction_connection = my->chain->applied_transaction.connect(
             [this]( const transaction_trace_ptr& trace ) {
+               if (eosio::chain::chain_config::deep_mind_enabled) {
+                  dmlog( "APPLIED_TRANSACTION ${block} ${traces}",
+                        ("traces", chain().to_variant_with_abi(trace, fc::microseconds(5000000)))
+                        ("block", chain().pending_block_state()->block_num)
+                  );
+               }
                my->applied_transaction_channel.publish( trace );
             } );
 
diff --git a/unittests/resource_limits_test.cpp b/unittests/resource_limits_test.cpp
index 76c0d5416..dbe22290a 100644
--- a/unittests/resource_limits_test.cpp
+++ b/unittests/resource_limits_test.cpp
@@ -250,11 +250,11 @@ BOOST_AUTO_TEST_SUITE(resource_limits_test)
       process_account_limit_updates();
 
       for (int idx = 0; idx < expected_iterations - 1; idx++) {
-         add_pending_ram_usage(account, increment);
+         add_pending_ram_usage(account, increment, 0, "test");
          verify_account_ram_usage(account);
       }
 
-      add_pending_ram_usage(account, increment);
+      add_pending_ram_usage(account, increment, 0, "test");
       BOOST_REQUIRE_THROW(verify_account_ram_usage(account), ram_usage_exceeded);
    } FC_LOG_AND_RETHROW();
 
@@ -264,7 +264,7 @@ BOOST_AUTO_TEST_SUITE(resource_limits_test)
       set_account_limits(account, 100, -1, -1 );
       verify_account_ram_usage(account);
       process_account_limit_updates();
-      BOOST_REQUIRE_THROW(add_pending_ram_usage(account, -101), transaction_exception);
+      BOOST_REQUIRE_THROW(add_pending_ram_usage(account, -101, 0, "test"), transaction_exception);
 
    } FC_LOG_AND_RETHROW();
 
@@ -274,11 +274,11 @@ BOOST_AUTO_TEST_SUITE(resource_limits_test)
       set_account_limits(account, UINT64_MAX, -1, -1 );
       verify_account_ram_usage(account);
       process_account_limit_updates();
-      add_pending_ram_usage(account, UINT64_MAX/2);
+      add_pending_ram_usage(account, UINT64_MAX/2, 0, "test");
       verify_account_ram_usage(account);
-      add_pending_ram_usage(account, UINT64_MAX/2);
+      add_pending_ram_usage(account, UINT64_MAX/2, 0, "test");
       verify_account_ram_usage(account);
-      BOOST_REQUIRE_THROW(add_pending_ram_usage(account, 2), transaction_exception);
+      BOOST_REQUIRE_THROW(add_pending_ram_usage(account, 2, 0, "test"), transaction_exception);
 
    } FC_LOG_AND_RETHROW();
 
@@ -293,7 +293,7 @@ BOOST_AUTO_TEST_SUITE(resource_limits_test)
       initialize_account(account);
       set_account_limits(account, limit, -1, -1 );
       process_account_limit_updates();
-      add_pending_ram_usage(account, commit);
+      add_pending_ram_usage(account, commit, 0, "test");
       verify_account_ram_usage(account);
 
       for (int idx = 0; idx < expected_iterations - 1; idx++) {
@@ -330,6 +330,6 @@ BOOST_AUTO_TEST_SUITE(resource_limits_test)
 
 
 
-   } FC_LOG_AND_RETHROW() 
+   } FC_LOG_AND_RETHROW()
 
 BOOST_AUTO_TEST_SUITE_END()
